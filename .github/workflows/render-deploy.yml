name: Deploy to Render (PR check)

on:
  pull_request:
    branches:
      - master

# Required permissions for PR comments and status checks
permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Render deploy
        id: deploy
        run: |
          echo "üöÄ Triggering Render deployment..."
          
          response=$(curl -s -w "\n%{http_code}" --request POST \
            --url https://api.render.com/v1/services/srv-d3e2rauuk2gs739rlrfg/deploys \
            --header "accept: application/json" \
            --header "content-type: application/json" \
            --header "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --data '{}')

          # Split response body and HTTP code
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          echo "HTTP Status: $http_code"
          echo "Response Body: $body"

          # Render returns 202 Accepted for async deploy triggers
          if [ "$http_code" != "202" ] && [ "$http_code" != "201" ] && [ "$http_code" != "200" ]; then
            echo "‚ùå Failed to trigger deploy. HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi

          # For 202 response, body might be empty - we need to get deploy ID differently
          if [ "$http_code" = "202" ]; then
            echo "‚úÖ Deploy accepted (202), fetching latest deploy..."
          
            # Wait a moment for deploy to register
            sleep 5
          
            # Get the latest deploy for this service
            deploys_response=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "accept: application/json" \
              "https://api.render.com/v1/services/srv-d3e2rauuk2gs739rlrfg/deploys?limit=1")
          
            deploy_id=$(echo "$deploys_response" | jq -r 'if type == "array" then .[0].deploy.id else .deploys[0].deploy.id end // empty')
          else
            # Try to extract from response body
            deploy_id=$(echo "$body" | jq -r '.id // .deploy.id // empty')
          fi
          
          if [ -z "$deploy_id" ] || [ "$deploy_id" = "null" ]; then
            echo "‚ùå Failed to get deploy_id"
            echo "Deploys response: $deploys_response"
            exit 1
          fi
          
          echo "‚úÖ Deploy triggered successfully"
          echo "Deploy ID: $deploy_id"
          echo "deploy_id=$deploy_id" >> $GITHUB_ENV

      - name: Wait for Render deploy to finish
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          echo "Deploy ID: ${{ env.deploy_id }}"
          
          max_attempts=15  # 15 minutes maximum (15 * 60 seconds)
          attempt=0
          status="pending"
          
          while [ "$attempt" -lt "$max_attempts" ]; do
            sleep 60
            attempt=$((attempt + 1))
          
            response=$(curl -s -w "\n%{http_code}" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "accept: application/json" \
              https://api.render.com/v1/services/srv-d3e2rauuk2gs739rlrfg/deploys/${{ env.deploy_id }})

            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')
            status=$(echo "$body" | jq -r 'if type == "array" then .[0].deploy.status else .status // .deploy.status end // empty')

            if [ "$http_code" != "200" ]; then
              echo "‚ö†Ô∏è Failed to fetch deploy status - HTTP $http_code (attempt $attempt/$max_attempts)"
              echo "‚ö†Ô∏è Deployment status check $status"
              echo "$body"
              continue
            fi
          
            echo "üìä Status check $attempt/$max_attempts: $status"

            # Check if deployment is complete
            if [ "$status" = "live" ]; then
              echo "‚úÖ Render deploy successful!"
              exit 0
            elif [ "$status" = "build_failed" ] || [ "$status" = "deploy_failed" ] || [ "$status" = "canceled" ]; then
              echo "‚ùå Render deploy failed with status: $status"
              exit 1
            fi
          
            # Continue waiting for in_progress, pending, building, etc.
          done

          echo "‚ùå Deploy timeout after 15 minutes"
          exit 1

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const deployId = '${{ env.deploy_id }}';
            const serviceId = 'srv-d3e2rauuk2gs739rlrfg';
            
            let message = status === 'success' 
              ? '‚úÖ **Render deployment successful!**\n\n'
              : '‚ùå **Render deployment failed**\n\n';
            
            if (deployId && deployId !== '' && deployId !== 'null') {
              message += `Deploy ID: \`${deployId}\`\n`;
              message += `[View deployment details](https://dashboard.render.com/web/${serviceId}/deploys/${deployId})`;
            }
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              console.log('Failed to comment on PR:', error.message);
              // Don't fail the workflow if commenting fails
            }